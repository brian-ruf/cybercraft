name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger only on tags that start with "v"
  pull_request:
    branches:
      - main

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.0
        with:
          tag_name: ${{ github.ref_name }}
          release_name: CyberCraft ${{ github.ref_name }}
          body: |
            ## CyberCraft ${{ github.ref_name }}
            
            ### Downloads:
            - **CyberCraft**: macOS 13+ Application
            - **CyberCraft.exe**: Windows 10+ Application
            
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Release Info
        run: |
          echo "Release ID: ${{ steps.create_release.outputs.result }}"

  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python -m venv venv
          .\venv\Scripts\activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        working-directory: src

      - name: Compile Windows Executable
        run: |
          .\compile.bat
        working-directory: src

      - name: Upload Windows Release Asset
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { repo } = context.repo;
            const release_id = '${{ needs.create-release.outputs.release_id }}';
            
            console.log(`Release ID: ${release_id}`);
            
            const uploadAsset = async () => {
              const filename = 'CyberCraft.exe';
              const contentType = 'application/octet-stream';
              const filePath = 'src/dist/CyberCraft.exe';
            
              try {
                // Check if file exists
                if (!fs.existsSync(filePath)) {
                  throw new Error(`File not found: ${filePath}`);
                }
                
                const fileSize = fs.statSync(filePath).size;
                console.log(`Uploading ${filename} (${fileSize} bytes)`);
                
                const fileData = fs.readFileSync(filePath);
                
                // Upload the release asset
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: filename,
                  data: fileData,
                  headers: {
                    'content-type': contentType,
                    'content-length': fileSize
                  }
                });
                
                console.log(`Successfully uploaded ${filename}`);
              } catch (error) {
                console.error(`Error uploading asset: ${error.message}`);
                core.setFailed(error.message);
              }
            };
            
            await uploadAsset();

  build-macos:
    name: Build macOS Executable
    runs-on: macos-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        working-directory: src

      - name: Compile macOS Executable
        run: |
          chmod +x *.sh resource/*.sh
          ./compile.sh
        working-directory: src

      - name: Upload macOS Release Asset
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { repo } = context.repo;
            const release_id = '${{ needs.create-release.outputs.release_id }}';
            
            console.log(`Release ID: ${release_id}`);
            
            const uploadAsset = async () => {
              const filename = 'CyberCraft';
              const contentType = 'application/octet-stream';
              const filePath = 'src/dist/CyberCraft';
            
              try {
                // Check if file exists
                if (!fs.existsSync(filePath)) {
                  throw new Error(`File not found: ${filePath}`);
                }
                
                const fileSize = fs.statSync(filePath).size;
                console.log(`Uploading ${filename} (${fileSize} bytes)`);
                
                const fileData = fs.readFileSync(filePath);
                
                // Upload the release asset
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: filename,
                  data: fileData,
                  headers: {
                    'content-type': contentType,
                    'content-length': fileSize
                  }
                });
                
                console.log(`Successfully uploaded ${filename}`);
              } catch (error) {
                console.error(`Error uploading asset: ${error.message}`);
                core.setFailed(error.message);
              }
            };
            
            await uploadAsset();
