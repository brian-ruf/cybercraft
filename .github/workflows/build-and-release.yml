name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger only on tags that start with "v"
  pull_request:
    branches:
      - main

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
    steps:
      - name: Create Release using GitHub API
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: `CyberCraft ${context.ref.replace('refs/tags/', '')}`,
              draft: false,
              prerelease: false
            });
            console.log(`Created release: ${data.html_url}`);
            console.log(`Upload URL: ${data.upload_url}`);
            // Write the release_id to outputs
            return data.id;

      - name: Print Release Info
        run: |
          echo "Release ID: ${{ steps.create_release.outputs.result }}"

  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python -m venv venv
          .\venv\Scripts\activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        working-directory: src

      - name: Compile Windows Executable
        run: |
          .\compile.bat
        working-directory: src

      - name: Upload Windows Release Asset
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { repo } = context.repo;
            const release_id = '${{ needs.create-release.outputs.release_id }}';
            
            console.log(`Release ID: ${release_id}`);
            
            const uploadAsset = async () => {
              const filename = 'CyberCraft.exe';
              const contentType = 'application/octet-stream';
              const filePath = 'src/dist/CyberCraft.exe';
            
              try {
                // Check if file exists
                if (!fs.existsSync(filePath)) {
                  throw new Error(`File not found: ${filePath}`);
                }
                
                const fileSize = fs.statSync(filePath).size;
                console.log(`Uploading ${filename} (${fileSize} bytes)`);
                
                const fileData = fs.readFileSync(filePath);
                
                // Upload the release asset
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: filename,
                  data: fileData,
                  headers: {
                    'content-type': contentType,
                    'content-length': fileSize
                  }
                });
                
                console.log(`Successfully uploaded ${filename}`);
              } catch (error) {
                console.error(`Error uploading asset: ${error.message}`);
                core.setFailed(error.message);
              }
            };
            
            await uploadAsset();

  # build-macos:
  #   name: Build macOS Executable
  #   runs-on: macos-latest
  #   needs: create-release
  #   if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.12'

  #     - name: Install Dependencies
  #       run: |
  #         python3 -m venv venv
  #         source venv/bin/activate
  #         pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pyinstaller
  #       working-directory: src

  #     - name: Compile macOS Executable
  #       run: |
  #         chmod +x *.sh resource/*.sh
  #         ./compile.sh
  #       working-directory: src

  #     - name: Upload macOS Release Asset
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const fs = require('fs');
  #           const { repo } = context.repo;
  #           const release_id = '${{ needs.create-release.outputs.release_id }}';
            
  #           console.log(`Release ID: ${release_id}`);
            
  #           const uploadAsset = async () => {
  #             const filename = 'CyberCraft';
  #             const contentType = 'application/octet-stream';
  #             const filePath = 'src/dist/CyberCraft';
            
  #             try {
  #               // Check if file exists
  #               if (!fs.existsSync(filePath)) {
  #                 throw new Error(`File not found: ${filePath}`);
  #               }
                
  #               const fileSize = fs.statSync(filePath).size;
  #               console.log(`Uploading ${filename} (${fileSize} bytes)`);
                
  #               const fileData = fs.readFileSync(filePath);
                
  #               // Upload the release asset
  #               await github.rest.repos.uploadReleaseAsset({
  #                 owner: context.repo.owner,
  #                 repo: context.repo.repo,
  #                 release_id: release_id,
  #                 name: filename,
  #                 data: fileData,
  #                 headers: {
  #                   'content-type': contentType,
  #                   'content-length': fileSize
  #                 }
  #               });
                
  #               console.log(`Successfully uploaded ${filename}`);
  #             } catch (error) {
  #               console.error(`Error uploading asset: ${error.message}`);
  #               core.setFailed(error.message);
  #             }
  #           };
            
  #           await uploadAsset();


  update-release-description:
    name: Update Release Description
    runs-on: ubuntu-latest
    needs: [create-release, build-windows]
    # needs: [create-release, build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Update Release Description
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = context.ref.replace('refs/tags/', '');
            const releaseId = '${{ needs.create-release.outputs.release_id }}';
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: `## CyberCraft ${tagName}
              
              ### Downloads:
              - **Windows 10+**: [CyberCraft.exe](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${tagName}/CyberCraft.exe)
              
              After download, the first-time launch may appear to do nothing for 20-40 seconds. This is normal as the application performs initial setup.
              On subsequent launches, the application may appear to do nothing for 5-10 secconds.
              
              `
            });

